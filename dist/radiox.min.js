/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./radiox.js":
/*!*******************!*\
  !*** ./radiox.js ***!
  \*******************/
/***/ (() => {

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(function () {
  function Radiox() {
    return {
      radioxGroupList: Array.from(document.querySelectorAll('.radiox-group')),
      radioxInputList: document.querySelectorAll('input.radiox[type="radio"]')
    };
  }

  Radiox.prototype.enable = function () {
    initRadioX.call(this);
    defineRadioXGroupEvent.call(this);
  };

  function initRadioX() {
    this.radioxInputList.forEach(function (inputRadio) {
      var radioxGroupDiv = inputRadio.closest('.radiox-group');
      var inputRadioClasses = Array.from(inputRadio.classList);
      var radioxEl = createElement('div', {
        "class": inputRadioClasses.join(' ')
      });
      var radioxTextEl = createElement('div', {
        "class": 'radiox-text'
      });
      showRadioXIcon(inputRadio, radioxEl);
      checkInitRadioX(inputRadioClasses, inputRadio);
      showCheckIcon(radioxEl);
      showRadioX(radioxGroupDiv, radioxEl, radioxTextEl, inputRadio);
    });
  }

  function defineRadioXGroupEvent() {
    this.radioxGroupList.forEach(function (radioxGroup) {
      return radioxGroup.addEventListener('click', handleRadioXGroup);
    });
  }

  function checkInitRadioX(inputRadioClasses, inputRadio) {
    var hasActiveRadioX = inputRadioClasses.includes('radiox--active');
    if (hasActiveRadioX) inputRadio.checked = true;
  }

  function showRadioXIcon(inputRadio, radioxEl) {
    var hasIcon = inputRadio.dataset.icon;

    if (hasIcon) {
      var radioxIconEl = createElement('div', {
        "class": 'radiox-icon'
      });
      var iconEl = createElement('i', {
        "class": inputRadio.dataset.icon
      });
      radioxEl.insertAdjacentElement('beforeend', radioxIconEl);
      radioxIconEl.insertAdjacentElement('beforeend', iconEl);
    }
  }

  function showRadioX(radioxGroupDiv, radioxEl, radioxTextEl, inputRadio) {
    var radioxtext = inputRadio.dataset.text;
    var radioxUpperText = inputRadio.value.replace(inputRadio.value[0], inputRadio.value[0].toUpperCase());
    radioxTextEl.textContent = radioxtext || radioxUpperText;
    radioxGroupDiv.insertAdjacentElement('beforeend', radioxEl);
    radioxEl.insertAdjacentElement('beforeend', radioxTextEl);
    radioxEl.insertAdjacentElement('beforeend', inputRadio);
    inputRadio.removeAttribute('class');
    inputRadio.removeAttribute('data-icon');
  }

  function handleRadioXGroup(event) {
    var isRadioXInputEl = event.target.tagName === 'INPUT';

    if (isRadioXInputEl) {
      unCheckRadioX(event);
      checkRadioX(event);
    }
  }

  function checkRadioX(event) {
    var radioxEl = event.target.parentElement;
    var radioxInputEl = event.target;
    radioxEl.classList.add('radiox--active');
    radioxInputEl.checked = true;
    showCheckIcon(radioxEl);
  }

  function unCheckRadioX(event) {
    var radioxGroupEl = event.target.closest('.radiox-group');
    var radioxEl = radioxGroupEl.querySelector('.radiox--active');
    var radioxCheckEl = radioxEl.querySelector('.radiox-check');
    var radioxInputEl = radioxEl.querySelector('input[type="radio"]');
    radioxCheckEl.remove();
    radioxEl.classList.remove('radiox--active');
    radioxInputEl.checked = false;
  }

  function showCheckIcon(radioxEl) {
    var radioxCheckEl = createElement('div', {
      "class": 'radiox-check'
    });
    var checkIconEl = createElement('div', {
      "class": 'radiox-check--icon'
    });
    var hasActiveRadioX = Array.from(radioxEl.classList).includes('radiox--active');

    if (hasActiveRadioX) {
      radioxEl.insertAdjacentElement('afterbegin', radioxCheckEl);
      radioxCheckEl.insertAdjacentElement('beforeend', checkIconEl);
    }
  }

  function createElement(elementName, attributes) {
    var element = document.createElement(elementName);
    Object.entries(attributes).forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          key = _ref2[0],
          attribute = _ref2[1];

      return element.setAttribute(key, attribute);
    });
    return element;
  }

  return Object.setPrototypeOf(_objectSpread({}, Radiox()), Radiox.prototype).enable();
})();

/***/ }),

/***/ "./radiox.css":
/*!********************!*\
  !*** ./radiox.css ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/radiox.min": 0,
/******/ 			"dist/radiox.min": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkradiox"] = self["webpackChunkradiox"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/radiox.min"], () => (__webpack_require__("./radiox.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/radiox.min"], () => (__webpack_require__("./radiox.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;